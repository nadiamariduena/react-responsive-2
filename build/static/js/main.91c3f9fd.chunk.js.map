{"version":3,"sources":["components/TopBar.js","components/FooterMenu.js","components/Content.js","App.js","index.js"],"names":["TopBar","styles","topBarStyle","position","top","display","justifyContent","alignItems","width","height","topBarHeight","backgroundColor","funky","borderBottom","black","fontWeight","padding","boxSizing","style","FooterMenu","menuItems","footerMenuHeight","color","bottom","map","item","i","key","flex","fontSize","icon","Content","posts","Array","fill","title","summary","contentStyle","reblast","paddingTop","paddingRight","paddingBottom","paddingLeft","post","marginBottom","App","props","state","white","opacity","minHeight","text","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNA8BeA,EA5BA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAc,CAClBC,SAAU,QACVC,IAAK,EACLC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,MAAO,OAEPC,OAAQR,EAAOS,aAEfC,gBAAiBV,EAAOW,QAExBC,aAAa,aAAD,OAAeZ,EAAOa,MAAM,KACxCC,WAAY,OACZC,QAAS,WACTC,UAAW,cAGb,OACE,yBAAKC,MAAOhB,GACV,oDADF,MAGE,gDCUSiB,EAjCI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWnB,EAAa,EAAbA,OAC/B,OACE,yBACEiB,MAAO,CACLb,QAAS,OACTE,WAAY,UACZC,MAAO,OACPC,OAAQR,EAAOoB,iBACfV,gBAAiB,OACjBW,MAAO,OACPnB,SAAU,QACVoB,OAAQ,IAGTH,EAAUI,KAAI,SAACC,EAAMC,GACpB,OACE,yBACEC,IAAKD,EACLR,MAAO,CACLb,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBsB,KAAM,IAGR,0BAAMV,MAAO,CAAEW,SAAU,KAAOJ,EAAKK,YCwBlCC,EAjDC,SAAC,GAAgB,IAAd9B,EAAa,EAAbA,OAuBX+B,EAAQC,MAAM,IAAIC,KAtBN,CAChBC,MAAM,2BACNC,QACE,kcAqBEC,EAAe,CACnB1B,gBAAiBV,EAAOqC,UAExBC,WAAYtC,EAAOS,aAAe,GAElC8B,aAAc,GACdC,cAAexC,EAAOoB,iBAAmB,GACzCqB,YAAa,IAGf,OACE,yBAAKxB,MAAOmB,GACTL,EAAMR,KAAI,SAACmB,EAAMjB,GAChB,OACE,yBAAKC,IAAKD,EAAGR,MAAO,CAAE0B,aAAc,KAClC,wBAAI1B,MAAO,CAAE0B,aAAc,IAAMD,EAAKR,OACtC,2BAAIQ,EAAKP,eCgCNS,E,kDArEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAOjB,IAAM9C,EAAS,CAab+C,MAAO,eAACC,EAAD,uDAAW,EAAX,oCAAwCA,EAAxC,MACPnC,MAAO,eAACmC,EAAD,uDAAW,EAAX,8BAAkCA,EAAlC,MACPrC,MAAO,2CACP0B,QAAS,uCAIT5B,aAAc,GACdW,iBAAkB,IAkBpB,OACE,yBAEEH,MAAO,CACLP,gBAAiBV,EAAOa,MAAM,KAC9BoC,UAAW,QACX/C,SAAU,aASZ,kBAAC,EAAD,CAAQF,OAAQA,IAChB,kBAAC,EAAD,CAASA,OAAQA,IACjB,kBAAC,EAAD,CAAYmB,UAzBE,CAChB,CAAEU,KAAK,eAAOqB,KAAM,UACpB,CAAErB,KAAK,eAAOqB,KAAM,UACpB,CAAErB,KAAK,eAAOqB,KAAM,UACpB,CAAErB,KAAK,eAAOqB,KAAM,UACpB,CAAErB,KAAK,eAAOqB,KAAM,WAoBgBlD,OAAQA,S,GAhEhCmD,a,MCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.91c3f9fd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TopBar = ({ styles }) => {\n  const topBarStyle = {\n    position: \"fixed\",\n    top: 0,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    // This is one of the things passed through PROPS, you will find the height of this in App.js\n    height: styles.topBarHeight,\n    // This one too, but here you can notice that there s not argument including the opacity like in App.js line 27\n    backgroundColor: styles.funky(),\n    // check App.js , line:28 to understand\n    borderBottom: `1px solid ${styles.black(0.1)}`,\n    fontWeight: \"bold\",\n    padding: \"0px 20px\",\n    boxSizing: \"border-box\",\n  };\n\n  return (\n    <div style={topBarStyle}>\n      <span>{`üò∫Ô∏è`}</span>\n      App\n      <span>{`‚öôÔ∏è`}</span>\n    </div>\n  );\n};\n\nexport default TopBar;\n","import React from \"react\";\n\nconst FooterMenu = ({ menuItems, styles }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"stretch\",\n        width: \"100%\",\n        height: styles.footerMenuHeight,\n        backgroundColor: \"#333\",\n        color: \"#fff\",\n        position: \"fixed\",\n        bottom: 0,\n      }}\n    >\n      {menuItems.map((item, i) => {\n        return (\n          <div\n            key={i}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              flex: 1,\n            }}\n          >\n            <span style={{ fontSize: 20 }}>{item.icon}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default FooterMenu;\n","import React from \"react\";\n\nconst Content = ({ styles }) => {\n  const dummyPost = {\n    title: `Here's a blog post title`,\n    summary:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n  };\n\n  /* Its the first time i see this fill used like this, its not difficult to understand\n  that the goal is to fill the \"container\" with the 20 paragraphs repeating each other .\n\n  So here you are telling that you want to fill the content with 5 post from the unique post in the dummyPost\n   const posts = Array(5).fill(dummyPost);\n\n  so the fill does:  \n  The fill() method fills the specified elements in an array with a static value.\n  https://www.w3schools.com/JSREF/jsref_fill.asp\n\n  I am really looking forward to see the content with a json file, where each paragraph will\n  have an ID and a different text or info\n\n\n  */\n\n  const posts = Array(20).fill(dummyPost);\n\n  const contentStyle = {\n    backgroundColor: styles.reblast(),\n    // the distance from the top to the first paragraph\n    paddingTop: styles.topBarHeight + 60,\n    //\n    paddingRight: 40,\n    paddingBottom: styles.footerMenuHeight + 20,\n    paddingLeft: 40,\n  };\n\n  return (\n    <div style={contentStyle}>\n      {posts.map((post, i) => {\n        return (\n          <div key={i} style={{ marginBottom: 50 }}>\n            <h2 style={{ marginBottom: 0 }}>{post.title}</h2>\n            <p>{post.summary}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Content;\n\n/*\norriginal\n\n\nimport React from \"react\";\n\nconst Content = ({ styles }) => {\n  const dummyPost = {\n    id:\"0\",\n    title: `Here's a blog post title`,\n    summary:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n       tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \n       quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \n       Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n        fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in \n        culpa qui officia deserunt mollit anim id est laborum.\",\n  };\n\n  const posts = Array(20).fill(dummyPost);\n\n  const contentStyle = {\n    backgroundColor: styles.reblast(),\n    // the distance from the top to the first paragraph\n    paddingTop: styles.topBarHeight + 60,\n    //\n    paddingRight: 40,\n    paddingBottom: styles.footerMenuHeight + 20,\n    paddingLeft: 40,\n  };\n\n  return (\n    <div style={contentStyle}>\n      {posts.map((post, i) => {\n        return (\n          <div key={i} style={{ marginBottom: 40 }}>\n            <h2 style={{ marginBottom: 0 }}>{post.title}</h2>\n            <p>{post.summary}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Content;\n\n\n\n\n\n */\n","import React, { Component } from \"react\";\nimport TopBar from \"./components/TopBar\";\nimport FooterMenu from \"./components/FooterMenu\";\nimport Content from \"./components/Content\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    // we‚Äôll just pass the styles as props to keep things easy. like so :    <TopBar styles={styles} />\n    const styles = {\n      /*\n\n\n      I just recently started using functions (e.g. (opacity = 1) => `rgba(255, 255, 255, ${opacity})`) \n      to manage my app‚Äôs main colors and their opacities, simply because I got super frustrated copying \n      and pasting or memorizing them with inline styles. Sure I could take advantage of \n      something like SCSS of Less, but it‚Äôs been a great help with the JavaScript + inline styles approach.\n\n      white: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n      \n      \n      */\n      white: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n      black: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n      funky: () => `rgba(195, 180, 197, 1)`,\n      reblast: () => `rgb(255, 230, 162)`,\n      // works also like that :  funky: () => `#f0d800`,\n      // works also like that :  funky: () => `hsl(54, 100%, 47%)`,\n      // works also like that :  funky: () => `rgba(195, 180, 197, 1)`,\n      topBarHeight: 50,\n      footerMenuHeight: 50,\n    };\n\n    /*   We have an array of menuItems:  const menuItems\n    \n    We have an array of menuItems that will be displayed in the FooterMenu. Why keep them \n    in App.js? Because we‚Äôll use the same array in the sidebar at larger screen sizes!\n    \n    \n    */\n    const menuItems = [\n      { icon: `üòÄ`, text: \"Item 1\" },\n      { icon: `üòâ`, text: \"Item 2\" },\n      { icon: `üòé`, text: \"Item 3\" },\n      { icon: `ü§î`, text: \"Item 4\" },\n      { icon: `üòõ`, text: \"Item 5\" },\n    ];\n\n    return (\n      <div\n        // We created a styles object that will contain the main styling properties for our app.\n        style={{\n          backgroundColor: styles.black(0.05),\n          minHeight: \"100vh\",\n          position: \"relative\",\n        }}\n      >\n        {/* \n        In this tutorial, we‚Äôll just pass the styles as props to keep things easy. A better way could be \n        to write a higher order component (HOC) or keep track of styles in a Redux store.\n        \n        \n        */}\n        <TopBar styles={styles} />\n        <Content styles={styles} />\n        <FooterMenu menuItems={menuItems} styles={styles} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./scss/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}